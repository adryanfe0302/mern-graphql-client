{"version":3,"sources":["reportWebVitals.js","context/auth.js","util/AuthRoute.js","components/LikeButton.js","util/graphql.js","components/DeleteButton.js","components/PostCard.js","util/hooks.js","components/PostForm.js","pages/Home.js","pages/Login.js","pages/SinglePost.js","pages/Register.js","components/MenuBar.js","App.js","ApolloProvider.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","user","localStorage","getItem","decodedToken","jwtDecode","exp","Date","now","removeItem","AuthContext","createContext","login","userData","logout","authReducer","state","action","type","Object","objectSpread2","payload","AuthProvider","props","_useReducer","useReducer","_useReducer2","slicedToArray","dispatch","react_default","a","createElement","Provider","assign","value","setItem","token","AuthRoute","Component","component","rest","objectWithoutProperties","useContext","react_router","render","to","LikeButton","_ref$post","post","id","likes","likeCount","_useState","useState","_useState2","liked","setLike","useEffect","find","like","username","_useMutation","useMutation","LIKE_POST_MUTATION","variables","postId","likePost","likeButton","Button","color","Icon","name","basic","as","Link","labelPosition","onClick","Label","pointing","gql","_templateObject","taggedTemplateLiteral","FETCH_POSTS_QUERY","graphql_templateObject","DELETE_POST_MUTATION","DeleteButton_templateObject","DELETE_COMMENT_MUTATION","_templateObject2","DeleteButton","commentId","callback","confirmOpen","setConfirmOpen","mutation","update","proxy","data","readQuery","query","console","log","getPosts","filter","writeQuery","deletePostOrComment","Fragment","Popup","content","inverted","trigger","floated","style","margin","Confirm","open","onCancel","onConfirm","PostCard","body","createdAt","commentCount","Card","fluid","Content","Image","size","src","Header","Meta","concat","moment","fromNow","Description","extra","components_DeleteButton","useForm","arguments","length","undefined","values","setValues","onChange","defineProperty","target","onSubmit","preventDefault","CREATE_POST_MUTATION","PostForm_templateObject","PostForm","_useForm","createPost","result","toConsumableArray","_useMutation2","error","Form","Field","Input","placeholder","className","marginBottom","graphQLErrors","message","Home","_useQuery","useQuery","loading","_useQuery$data","posts","Grid","columns","Row","Column","components_PostForm","Transition","Group","map","key","components_PostCard","LOGIN_USER","Login_templateObject","Login","context","loginUser","password","errors","setErrors","history","push","onError","err","extensions","exception","noValidate","label","primary","keys","FETCH_POST_QUERY","SinglePost_templateObject","SUBMIT_COMMENT_MUTATION","SinglePost_templateObject2","SinglePost","match","params","comment","setComment","createRefInput","useRef","postMarkup","getPost","current","blur","submitComment","comments","width","float","naem","ref","disabled","trim","REGISTER_USER","Register_templateObject","Register","addUser","email","confirmPassword","register","MenuBar","pathname","window","location","path","substr","activeItem","setActiveItem","_useContext","handleItemClick","Menu","secondary","Item","active","position","App","react_router_dom","Container","exact","util_AuthRoute","httpLink","createHttpLink","uri","authLink","setContext","headers","Authorization","client","ApolloClient","link","cache","InMemoryCache","ApolloProvider","react_common_esm","src_App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.2dd0dc36.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { createContext, useReducer } from 'react'\nimport jwtDecode from 'jwt-decode'\n\nconst initialState = {\n    user: null \n}\n\nif (localStorage.getItem('jwtToken')){\n    // this is for check if token already expire or not. decode the token into json object user information \n\n    const decodedToken = jwtDecode(localStorage.getItem('jwtToken'))\n    if (decodedToken.exp * 1000 < Date.now()){\n        localStorage.removeItem('jwtToken')\n    } else {\n        initialState.user = decodedToken\n    }\n}\n\nconst AuthContext = createContext({\n    user: null,\n    login: (userData) => {},\n    logout: () => {}\n})\n\nfunction authReducer(state, action){\n    switch(action.type){\n        case 'LOGIN':\n            return {\n                ...state,\n            user: action.payload\n            }\n\n        case 'LOGOUT':\n            return {\n                ...state,\n            user: null\n            }\n        default: \n            return state\n    }\n}\n\nfunction AuthProvider(props){\n    const [state, dispatch] = useReducer(authReducer, initialState)\n    function login(userData){\n        localStorage.setItem('jwtToken', userData.token)\n        dispatch({\n            type: 'LOGIN',\n            payload: userData\n        })\n    }\n    function logout(){\n        localStorage.removeItem('jwtToken')\n        dispatch({\n            type: 'LOGOUT'\n        })\n    }\n    return (\n        <AuthContext.Provider \n            value={{ user: state.user, login, logout }}\n            {...props}\n        />\n    )\n}\n\nexport { AuthContext, AuthProvider }","import React, { useContext } from 'react'\nimport { Route, Redirect } from 'react-router-dom'\n\nimport { AuthContext } from '../context/auth'\n\nfunction AuthRoute({ component: Component, ...rest }){\n    const { user } = useContext(AuthContext)\n    return (\n        <Route \n            {...rest}\n            render={(props) => \n                user ? <Redirect to=\"/\" /> : <Component {...props} /> \n            }\n        />\n    )\n}\n\nexport default AuthRoute;\n","import React, { useEffect, useState } from 'react'\nimport {Link} from 'react-router-dom'\nimport gql from 'graphql-tag'\nimport { useMutation } from '@apollo/react-hooks'\nimport { Icon, Label, Button } from 'semantic-ui-react'\n\nexport function LikeButton({user, post: { id, likes, likeCount }}) {\n    \n    const [liked, setLike] = useState(false)\n    useEffect(() => {\n       if(user && likes.find(like => like.username === user.username)){\n           setLike(true)\n       } else setLike(false)\n    }, [user, likes]) \n\n    const [likePost] = useMutation(LIKE_POST_MUTATION, {\n        variables: { postId: id }\n    })\n\n    const likeButton = user ? (\n        liked ? <Button color='teal'> <Icon name='heart' /> </Button> \n        : \n        <Button color='teal' basic>\n            <Icon name='heart' />\n        </Button>\n    ) : (\n        <Button as={Link} to='/login' color='teal' basic>\n        <Icon name='heart' />\n        </Button>\n        )\n\n    return <Button labelPosition='right' onClick={likePost}>\n        {likeButton}\n        <Label basic color='teal' pointing='left'>\n        {likeCount}\n        </Label>\n    </Button>\n}\n\n\nconst LIKE_POST_MUTATION = gql`\n    mutation likePost($postId: ID!){\n        likePost(postId: $postId){\n            id\n            likes{\n                id username\n            }\n            likeCount\n        }\n    }\n`\n","import gql from 'graphql-tag';\n\nexport const FETCH_POSTS_QUERY = gql`\n  {\n    getPosts {\n      id\n      body\n      createdAt\n      username\n      likeCount\n      likes {\n        username\n      }\n      commentCount\n      comments {\n        id\n        username\n        createdAt\n        body\n      }\n    }\n  }\n`;","import React, { useState } from 'react'\nimport { Button, Icon, Confirm, Popup } from 'semantic-ui-react'\nimport gql from 'graphql-tag'\nimport { useMutation } from '@apollo/react-hooks'\nimport { FETCH_POSTS_QUERY } from '../util/graphql'\n\nfunction DeleteButton({ postId, commentId, callback }){\n  \n    const [confirmOpen, setConfirmOpen] = useState(false)\n\n    // dynamic delete mutation\n    const mutation = commentId ? DELETE_COMMENT_MUTATION : DELETE_POST_MUTATION\n\n    const [deletePostOrComment] = useMutation(mutation, {\n        update(proxy){\n            setConfirmOpen(false)\n\n            if(!commentId){\n                // read cache local\n                const data = proxy.readQuery({\n                    query: FETCH_POSTS_QUERY\n                })\n\n                console.log('proxy data', data)\n\n                // remove post based on id \n                data.getPosts = data.getPosts.filter((post) => post.id !== postId)\n\n                console.log('proxy data 2', data)\n\n                // write post to local\n                proxy.writeQuery({\n                    query: FETCH_POSTS_QUERY,\n                    data\n                })\n            } else {\n                \n            }\n            // we only call callback if parent component has its function\n            if(callback) {\n                callback()\n            }\n\n        },\n        variables: {\n            postId,\n            commentId\n        }\n    })\n\n    return (\n        <>\n            <Popup\n            content={commentId ? 'delete comment' : 'delete post'}\n            inverted\n            trigger={\n            <Button \n            as=\"div\" \n            color=\"red\" \n            floated=\"right\" \n            onClick={() => setConfirmOpen(true)}>\n                <Icon name=\"trash\" style={{margin: '0px'}} />\n            </Button>\n            } />\n            <Confirm \n                open={confirmOpen}\n                onCancel={() => setConfirmOpen(false)}\n                onConfirm={deletePostOrComment}\n            />\n        </>\n    )\n}\n\nconst DELETE_POST_MUTATION = gql`\n    mutation deletePost($postId: ID!){\n        deletePost(postId: $postId)\n    }\n`\n\nconst DELETE_COMMENT_MUTATION = gql`\n    mutation deleteComment(\n        $postId: ID!,\n        $commentId: ID!\n    ){\n        deleteComment(\n            postId: $postId,\n            commentId: $commentId\n        ){\n            id body createdAt username likeCount commentCount\n            likes{\n                id username createdAt\n            }\n            comments{\n                id body username createdAt\n            }\n        }\n    }\n`\n\nexport default DeleteButton\n\n","import React, { useContext } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Card, Icon, Label, Image, Button, Popup } from 'semantic-ui-react'\nimport moment from 'moment'\nimport { AuthContext } from '../context/auth'\nimport { LikeButton } from '../components/LikeButton'\nimport DeleteButton from '../components/DeleteButton'\n\nfunction PostCard({ post: { body, createdAt, id, username, likeCount, commentCount, likes } }) {\n\n    const { user } = useContext(AuthContext)\n\n    return (\n        <Card fluid>\n        <Card.Content>\n            <Image\n            floated='right'\n            size='mini'\n            src='https://react.semantic-ui.com/images/avatar/large/molly.png'\n            />\n            <Card.Header>{username}</Card.Header>\n            <Card.Meta as={Link} to={`/post/${id}`}>{moment(createdAt).fromNow(true)}</Card.Meta>\n            <Card.Description>\n            {body}\n            </Card.Description>\n        </Card.Content>\n        <Card.Content extra>\n                <LikeButton user={user} post={{id, likes, likeCount}} />\n                <Popup \n                content=\"comment on post\"\n                inverted\n                trigger={\n                <Button labelPosition='right' as={Link} to={`/posts/${id}`}> \n                    <Button color='blue' basic>\n                        <Icon name='comments' />\n                    </Button>\n                    <Label basic color='blue' pointing='left'>\n                    {commentCount}\n                    </Label>\n                </Button>\n                } />\n           \n           {user && user.username === username && <DeleteButton postId={id} />}\n        </Card.Content>\n        </Card>\n    )\n\n}\n\n\nexport default PostCard","import { useState } from 'react'\n\nexport const useForm = (callback, initialState = {}) => {\n    const [values, setValues] = useState(initialState)\n    const onChange = (e) => {\n        console.log('here', {...values, [e.target.name]: e.target.value})\n        setValues({...values, [e.target.name]: e.target.value})\n    }\n    const onSubmit = (e) => {\n        e.preventDefault();\n        callback()\n    }\n    return {\n        onChange,\n        onSubmit,\n        values\n    }\n} ","import React from 'react'\nimport { useMutation } from '@apollo/react-hooks'\nimport gql from 'graphql-tag'\nimport { Form, Button } from 'semantic-ui-react'\nimport { useForm } from '../util/hooks'\nimport { FETCH_POSTS_QUERY } from '../util/graphql'\n\nfunction PostForm(){\n    const { values, onChange, onSubmit } = useForm(createPostCallback, {\n        body: ''\n    })\n\n    const [createPost, { error }] = useMutation( CREATE_POST_MUTATION, {\n         // params\n        variables: values,\n        update(proxy, result){\n            console.log('proxy', proxy)\n           \n      \n            const data = proxy.readQuery({\n                query: FETCH_POSTS_QUERY\n            })\n            console.log('proxy data', data)\n            data.getPosts = [result.data.createPost, ...data.getPosts]\n\n            console.log('data.getPosts', data.getPosts)\n            proxy.writeQuery({ query: FETCH_POSTS_QUERY, data })\n            console.log('data.writeQuery', { query: FETCH_POSTS_QUERY, data })\n            values.body = ''\n        },     \n       \n    })\n\n    function createPostCallback(){\n        createPost()\n    }\n\n    return (\n        <>\n        <Form onSubmit={onSubmit}>\n            <h2> Create a post:</h2>\n            <Form.Field>\n                <Form.Input\n                    placeholder=\"hi world\"\n                    name=\"body\"\n                    onChange={onChange}\n                    value={values.body}\n                    error={error ? true : false}\n                />\n                <Button type=\"submit\" color='teal'>\n                    Submit\n                </Button>\n            </Form.Field>\n        </Form>\n        {error && (\n            <div className=\"ui error message\" style={{marginBottom: '20px'}}>\n                <ul className=\"list\">\n                    <li>{error.graphQLErrors[0].message}</li>\n                </ul>\n            </div>\n        )}\n        </>\n    )\n}\n\nconst CREATE_POST_MUTATION = gql`\n    mutation createPost(\n        $body: String!\n    ){\n        createPost(body: $body){\n            id body createdAt username \n            comments {\n                id body username createdAt\n            }\n            likes{\n                id username createdAt\n            } \n            likeCount commentCount\n        }\n    }\n`\n\n\nexport default PostForm","import React, { useContext } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Grid, Transition } from 'semantic-ui-react';\n\nimport { AuthContext } from '../context/auth';\nimport PostCard from '../components/PostCard';\nimport PostForm from '../components/PostForm';\nimport { FETCH_POSTS_QUERY } from '../util/graphql';\n\nfunction Home() {\n  const { user } = useContext(AuthContext);\n  const {\n    loading,\n    data: { getPosts: posts } = {}\n  } = useQuery(FETCH_POSTS_QUERY);\n\n  return (\n    <Grid columns={3}>\n      <Grid.Row className=\"page-title\">\n        <h1>Recent Posts</h1>\n      </Grid.Row>\n      <Grid.Row>\n        {user && (\n          <Grid.Column>\n            <PostForm />\n          </Grid.Column>\n        )}\n        {loading ? (\n          <h1>Loading posts..</h1>\n        ) : (\n          <Transition.Group>\n            {\n              posts &&\n              posts.map((post) => (\n                <Grid.Column key={post.id} style={{ marginBottom: 20 }}>\n                  <PostCard post={post} />\n                </Grid.Column>\n              ))\n            }\n          </Transition.Group>\n        )}\n      </Grid.Row>\n    </Grid>\n  );\n}\n\nexport default Home;\n","import React, { useState, useContext } from 'react'\nimport gql from 'graphql-tag'\nimport { useMutation } from '@apollo/react-hooks'\nimport { Form, Button } from 'semantic-ui-react'\nimport { useForm } from './../util/hooks'\nimport { AuthContext } from './../context/auth'\n\nconst Login = (props) => {\n    const context = useContext(AuthContext)\n    const { onChange, onSubmit, values } = useForm(goLoginUser,  {\n        username: '',\n        password: '',\n    })\n\n    const [errors, setErrors] = useState('')\n\n    const [loginUser, { loading }] = useMutation( LOGIN_USER, {\n        // this is the result data\n\n        // it could be like this\n        // update(proxy, result){\n        //     context.login(result)\n        //     props.history.push('/')\n        // },\n\n        // or\n        update(proxy, { data: { login: userData } }){\n            context.login(userData)\n            props.history.push('/')\n        },\n        // catch error\n        onError(err){\n            console.log('err', err)\n            setErrors(err.graphQLErrors[0].extensions.exception.errors)\n        },\n        // params\n        variables: {\n            username: values.username,\n            password: values.password,\n        }\n       \n    })\n\n   function goLoginUser(){\n       loginUser()\n   }\n\n    return  <div className='form-container'> \n     <Form onSubmit={onSubmit} noValidate className={loading ? 'loading' : ''}>\n            <h1> Login </h1>\n            <Form.Input\n                label=\"Username\"\n                placeholder=\"Username...\"\n                name=\"username\"\n                type=\"text\"\n                onChange={onChange}\n                error={errors.username ? true : false}\n                values={values.username}\n            />\n            <Form.Input\n                label=\"Password\"\n                placeholder=\"Password...\"\n                name=\"password\"\n                type=\"password\"\n                onChange={onChange}\n                error={errors.password ? true : false}\n                values={values.password}\n            />\n            <Button type='submit' primary> \n                Login\n           </Button>\n        </Form>\n        {Object.keys(errors).length > 0 && (\n            <div className=\"ui error message\">\n                <ul className=\"list\">\n                    {Object.values(errors).map((value) => {\n                        return <li key={value}> {value} </li>\n                    })}\n                </ul>\n            </div>\n        )}\n        </div>\n}\n\n\nconst LOGIN_USER = gql`\n    mutation login(\n        $username: String!\n        $password: String!\n    ){\n        login(username: $username password: $password){\n            # return\n            id\n            email\n            token\n            createdAt\n            username\n        }\n    }\n`\n\nexport default Login","import React, { useContext, useState, useRef } from 'react'\nimport gql from 'graphql-tag'\nimport moment from 'moment'\nimport { useQuery } from '@apollo/react-hooks'\nimport { AuthContext } from './../context/auth'\nimport { useMutation } from '@apollo/react-hooks'\nimport { Grid, Image, Icon, Label, Button, Card, Form } from 'semantic-ui-react'\nimport { LikeButton } from '../components/LikeButton'  \nimport DeleteButton from '../components/DeleteButton'\n\nfunction SinglePost(props){\n    const postId = props.match.params.postId\n    const { user  } = useContext(AuthContext)\n    const [comment, setComment] = useState('')\n\n    const createRefInput = useRef(null)\n    console.log('postId', postId)\n\n    const { data: { getPost } = {}} = useQuery(FETCH_POST_QUERY, {\n        variables: { postId }\n    })    \n\n    const [submitComment] = useMutation(SUBMIT_COMMENT_MUTATION, {\n        update(proxy,result){\n\n            setComment('')\n            createRefInput.current.blur()\n        },\n        variables: {\n            postId,\n            body: comment\n        }\n    })\n\n    const deletePostCallback = () => {\n        props.history.push('/')\n    }\n\n    let postMarkup;\n    if(!getPost){\n        postMarkup = <div> loading post... </div>\n    } else {\n        const { id, body, createdAt, username, comments, likes, likeCount, commentCount } = getPost\n        postMarkup = (\n            <Grid>\n                <Grid.Row>\n                    <Grid.Column width={2}>\n                        <Image \n                            src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\"\n                            size=\"small\"\n                            float=\"rigth\"\n                            />\n                    </Grid.Column>\n                    <Grid.Column width={10}>\n                        <Card fluid>\n                            <Card.Content>\n                                <Card.Header> {username} </Card.Header>\n                                <Card.Meta>\n                                    {moment(createdAt).fromNow()}\n                                </Card.Meta>\n                                <Card.Description>\n                                    {body}\n                                </Card.Description>\n                            </Card.Content>\n                            <hr />\n                            <Card.Content extra>\n                                <LikeButton user={user} post={{ id, likeCount, likes }} />\n                                <Button as=\"div\"\n                                labelPosition=\"right\"\n                                onClick={() => {\n                                    console.log('comment post')\n                                }}\n                                >\n                                    <Button basic color=\"blue\"> \n                                        <Icon name=\"comments\" />\n                                    </Button>\n                                    <Label basic color=\"blue\" pointing=\"left\"> \n                                    {commentCount}\n                                    </Label>\n                                </Button>\n                                {user && user.username === username && (\n                                    <DeleteButton postId={id} callback={deletePostCallback}/>\n                                )}\n                                \n                            </Card.Content>\n                        </Card>\n                        {user && <Card fluid> \n                            <Card.Content>\n                            <p> post comment </p>\n                            <Form>\n                                <div className=\"ui action input fluid\">\n                                    <input type=\"text\"\n                                    placeholder=\"comment...\"\n                                    naem=\"comment\"\n                                    value={comment}\n                                    onChange={(e) => setComment(e.target.value)}\n                                    ref={createRefInput}\n                                    />\n                                    <button type='submit'\n                                    className=\"ui button teal\"\n                                    disabled={comment.trim() === ''}\n                                    onClick={submitComment}\n                                    >\n                                        submit\n                                    </button>\n                                </div>\n                            </Form>\n                            </Card.Content>\n                        </Card>}\n                        {comments.map(comment => {\n                            return <Card fluid key={comment.id}>\n                                <Card.Content>\n                                    {user && user.username === username && (\n                                        <DeleteButton postId={id} commentId={comment.id}\n                                        />\n                                    )}\n                                    <Card.Header>{comment.username}</Card.Header>\n                                    <Card.Meta>\n                                        {moment(comment.createdAt).fromNow()}\n                                    </Card.Meta>\n                                    <Card.Description>\n                                        {comment.body}\n                                    </Card.Description>\n                                </Card.Content>\n                            </Card>\n                        })}\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        )\n    }\n\n    return postMarkup\n}\n\nconst FETCH_POST_QUERY = gql`\n    query($postId: ID!){\n        getPost(postId:$postId){\n            id body createdAt username likeCount commentCount\n            likes{\n                username\n            }\n            comments{\n               id username createdAt body\n            }\n        }\n    }\n`\n\nconst SUBMIT_COMMENT_MUTATION = gql`\n    mutation createComment($postId: String!, $body: String!){\n        createComment(\n            postId: $postId,\n            body: $body\n        ){\n            id body createdAt username likeCount commentCount\n            likes{\n                id username createdAt\n            }\n            comments{\n                id body username createdAt\n            }\n        }\n    }\n`\n\nexport default SinglePost","import React, { useState, useContext } from 'react'\nimport gql from 'graphql-tag'\nimport { useMutation } from '@apollo/react-hooks'\nimport { Form, Button } from 'semantic-ui-react'\nimport { useForm } from './../util/hooks'\nimport { AuthContext } from './../context/auth'\n\nconst Register = (props) => {\n    const context = useContext(AuthContext)\n    const { onChange, onSubmit, values } = useForm(registerUser,  {\n        username: '',\n        email: '',\n        password: '',\n        confirmPassword: ''\n    })\n\n    const [errors, setErrors] = useState('')\n\n    const [addUser, { loading }] = useMutation( REGISTER_USER, {\n        // this is the result data\n\n        // it could be like this\n        // update(proxy, result){\n        //     props.history.push('/')\n        // },\n        // or\n        update(proxy, { data: { register: userData } }){\n            // login use the same function with register\n            context.login(userData)\n            props.history.push('/')\n        },\n\n        // catch error\n        onError(err){\n            setErrors(err.graphQLErrors[0].extensions.exception.errors)\n        },\n        // params\n        variables: {\n            username: values.username,\n            email: values.email,\n            password: values.password,\n            confirmPassword: values.confirmPassword\n        },\n       \n    })\n\n   function registerUser(){\n        addUser()\n   }\n\n\n    return <div className='form-container'>\n        <Form onSubmit={onSubmit} noValidate className={loading ? 'loading' : ''}>\n            <h1> Register </h1>\n            <Form.Input\n                label=\"Username\"\n                placeholder=\"Username...\"\n                name=\"username\"\n                type=\"text\"\n                onChange={onChange}\n                error={errors.username ? true : false}\n                values={values.username}\n            />\n            <Form.Input\n                label=\"Email\"\n                placeholder=\"Email...\"\n                name=\"email\"\n                type=\"email\"\n                onChange={onChange}\n                error={errors.email ? true : false}\n                values={values.email}\n            />\n            <Form.Input\n                label=\"Password\"\n                placeholder=\"Password...\"\n                name=\"password\"\n                type=\"password\"\n                onChange={onChange}\n                error={errors.password ? true : false}\n                values={values.password}\n            />\n            <Form.Input\n                label=\"Confirm Password\"\n                placeholder=\"Confirm Password...\"\n                name=\"confirmPassword\"\n                type=\"password\"\n                onChange={onChange}\n                error={errors.confirmPassword ? true : false}\n                values={values.confirmPassword}\n            />\n           <Button type='submit' primary> \n                Register\n           </Button>\n        </Form>\n        \n        {Object.keys(errors).length > 0 && (\n            <div className=\"ui error message\">\n                <ul className=\"list\">\n                    {Object.values(errors).map((value) => {\n                        return <li key={value}> {value} </li>\n                    })}\n                </ul>\n            </div>\n        )}\n    </div>\n}\n\nconst REGISTER_USER = gql`\n    mutation register(\n        $username: String!\n        $email: String!\n        $password: String!\n        $confirmPassword: String!\n    ){\n        register(\n            registerInput: {\n                username: $username\n                email: $email\n                password: $password\n                confirmPassword: $confirmPassword\n            }\n        ){\n            # return\n            id\n            email\n            token\n            createdAt\n            username\n        }\n    }\n`\n\nexport default Register","import React, { useState, useContext } from 'react'\nimport { AuthContext } from './../context/auth'\nimport { Menu } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\n\nexport default function MenuBar()  {\n \n  const pathname = window.location.pathname\n  const path = pathname === '/' ? 'home' : pathname.substr(1)\n  const [activeItem, setActiveItem] = useState(path)\n  const { user, logout } = useContext(AuthContext)\n\n  const handleItemClick = (e, { name }) => setActiveItem(name)\n  console.log('user', user)\n  const menuBar = user ? <Menu pointing secondary size=\"massive\" color=\"teal\">\n    <Menu.Item\n      name={user.username}\n      active\n      as={Link} \n      to={'/'}\n    />\n\n    <Menu.Menu position='right'>\n      <Menu.Item\n        name='logout'\n        onClick={logout}\n      />\n    </Menu.Menu>\n  </Menu> : <Menu pointing secondary size=\"massive\" color=\"teal\">\n    <Menu.Item\n      name='home'\n      active={activeItem === 'home'}\n      onClick={handleItemClick}\n      as={Link} \n      to={'/'}\n    />\n\n    <Menu.Menu position='right'>\n      <Menu.Item\n        name='login'\n        active={activeItem === 'login'}\n        onClick={handleItemClick}\n        as={Link}\n        to={'/login'}\n      />\n      <Menu.Item\n        name='register'\n        active={activeItem === 'register'}\n        onClick={handleItemClick}\n        as={Link}\n        to={'/register'}\n      />\n    </Menu.Menu>\n  </Menu>\n\n\n  return menuBar\n}","import React from 'react'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport { Container } from 'semantic-ui-react'\nimport { AuthProvider } from './context/auth'\nimport AuthRoute from './util/AuthRoute'\nimport Home from '../src/pages/Home'\nimport Login from '../src/pages/Login'\nimport SinglePost from '../src/pages/SinglePost'\nimport Register from '../src/pages/Register'\nimport MenuBar from './components/MenuBar'\n\n//css\nimport 'semantic-ui-css/semantic.min.css'\nimport './App.css';\n\nfunction App() {\n  return (\n    <AuthProvider> \n      <Router>\n        <Container> \n          <MenuBar />\n          <Route exact path='/' component={Home} />\n          <AuthRoute exact path='/login' component={Login} />\n          <AuthRoute exact path='/register' component={Register} />\n          <Route exact path='/posts/:postId' component={SinglePost} />\n        </Container>\n      </Router>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","import React from 'react'\nimport App from './App'\nimport ApolloClient from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { createHttpLink } from 'apollo-link-http'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport { setContext } from 'apollo-link-context'\n\nconst httpLink = createHttpLink({\n    uri: 'https://sosmed-graphql.herokuapp.com/'\n})\n\nconst authLink = setContext(() => {\n    const token = localStorage.getItem('jwtToken')\n    return {\n        headers: {\n            Authorization: token ? `Bearer ${token}` : ''\n        }\n    }\n})\n\nconst client = new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache()\n})\n\n\n\nexport default(\n    <ApolloProvider client={client}>\n        <App />\n    </ApolloProvider>\n) \n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport ApolloProvider from './ApolloProvider'\n\nReactDOM.render(ApolloProvider, document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}